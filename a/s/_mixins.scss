/*
  Typography
*/  
  @mixin font-size($sizeValue: $alphaFontSize) {
    font-size: $sizeValue + px;
    font-size: ($sizeValue / 10) + rem;
  }

  @mixin line-height($sizeValue: $alphaLineHeight) {
    line-height: $sizeValue + px;
    line-height: ($sizeValue / 10) + rem;
  }

  @mixin letter-spacing($sizeValue: $alphaLetterSpacing) {
    letter-spacing: $sizeValue + px;
    letter-spacing: ($sizeValue / 10) + rem;
  }

  @mixin word-spacing($sizeValue: $alphaLetterSpacing) {
    word-spacing: $sizeValue + px;
    word-spacing: ($sizeValue / 10) + rem;
  }
  
/*
   Margins, Padding, Positions and Sizes
*/
  @mixin bottom($sizeValue) {
    bottom: $sizeValue + px;
    bottom: ($sizeValue / 10) + rem;
  }

  @mixin height($sizeValue) {
    height: $sizeValue + px;
    height: ($sizeValue / 10) + rem;
  }

  @mixin left($sizeValue) {
    left: $sizeValue + px;
    left: ($sizeValue / 10) + rem;
  }
  
  @mixin margin($top: false, $right: false, $bottom: false, $left: false) {
    @if $top == false {
      margin: 0px;
      margin: 0rem;
    } @else if $right == false {
      margin: $top + px;
      margin: ($top / 10) + rem;
    } @else if $bottom == false {
      @if $right == auto {
        margin: $top + px auto;
        margin: ($top / 10) + rem auto;      
      } @else {
        margin: $top + px $right + px;
        margin: ($top / 10) + rem ($right / 10) + rem;
      }
    } @else if $left == false {
      @if $right == auto {
        margin: $top + px auto $bottom + px;
        margin: ($top / 10) + rem auto ($bottom / 10) + rem;      
      } @else {
        margin: $top + px $right + px $bottom + px;
        margin: ($top / 10) + rem ($right / 10) + rem ($bottom / 10) + rem;
      }
    } @else {
      @if $right == auto {
        @if $left == auto {
          margin: $top + px auto $bottom + px auto;
          margin: ($top / 10) + rem auto ($bottom / 10) + rem auto; 
        } @else {
          margin: $top + px auto $bottom + px $left + px;
          margin: ($top / 10) + rem auto ($bottom / 10) + rem ($left / 10) + rem; 
        }   
      } @else {
        @if $left == auto {
          margin: $top + px $right + px $bottom + px auto;
          margin: ($top / 10) + rem ($right / 10) + rem ($bottom / 10) + rem auto;
        } @else {
          margin: $top + px $right + px $bottom + px $left + px;
          margin: ($top / 10) + rem ($right / 10) + rem ($bottom / 10) + rem ($left / 10) + rem;
        }   
      }
    }
  }

  @mixin min-height($sizeValue) {
    min-height: $sizeValue + px;
    min-height: ($sizeValue / 10) + rem;
  }
  
  @mixin padding($top: false, $right: false, $bottom: false, $left: false) {
    @if $top == false {
      padding: 0px;
      padding: 0rem;
    } @else if $right == false {
      padding: $top + px;
      padding: ($top / 10) + rem;
    } @else if $bottom == false {
      @if $right == auto {
        padding: $top + px auto;
        padding: ($top / 10) + rem auto;      
      } @else {
        padding: $top + px $right + px;
        padding: ($top / 10) + rem ($right / 10) + rem;
      }
    } @else if $left == false {
      @if $right == auto {
        padding: $top + px auto $bottom + px;
        padding: ($top / 10) + rem auto ($bottom / 10) + rem;      
      } @else {
        padding: $top + px $right + px $bottom + px;
        padding: ($top / 10) + rem ($right / 10) + rem ($bottom / 10) + rem;
      }
    } @else {
      @if $right == auto {
        @if $left == auto {
          padding: $top + px auto $bottom + px auto;
          padding: ($top / 10) + rem auto ($bottom / 10) + rem auto; 
        } @else {
          padding: $top + px auto $bottom + px $left + px;
          padding: ($top / 10) + rem auto ($bottom / 10) + rem ($left / 10) + rem; 
        }   
      } @else {
        @if $left == auto {
          padding: $top + px $right + px $bottom + px auto;
          padding: ($top / 10) + rem ($right / 10) + rem ($bottom / 10) + rem auto;
        } @else {
          padding: $top + px $right + px $bottom + px $left + px;
          padding: ($top / 10) + rem ($right / 10) + rem ($bottom / 10) + rem ($left / 10) + rem;
        }   
      }
    }
  }
  
  @mixin right($sizeValue) {
    right: $sizeValue + px;
    right: ($sizeValue / 10) + rem;
  }

  @mixin top($sizeValue) {
    top: $sizeValue + px;
    top: ($sizeValue / 10) + rem;
  }

  @mixin width($sizeValue) {
    width: $sizeValue + px;
    width: ($sizeValue / 10) + rem;
  }
  
/*
  General Styling
*/
  @mixin backface-visibility($value) {
    -webkit-backface-visibility: $value;
    -moz-backface-visibility: $value;
    -ms-backface-visibility: $value;
    -o-backface-visibility: $value;
    backface-visibility: $value;
  }
  
  @mixin border-radius($radius, $radius2: false, $radius3: false, $radius4: false) {
    @if $radius2 == false {
      -moz-border-radius: $radius * 1px;
      -ms-border-radius: $radius * 1px;
      -o-border-radius: $radius * 1px;
      -webkit-border-radius: $radius * 1px;
      border-radius: $radius * 1px;
    } @else {
      -moz-border-radius: $radius * 1px  $radius2 * 1px  $radius3 * 1px  $radius4 * 1px;
      -ms-border-radius: $radius * 1px  $radius2 * 1px  $radius3 * 1px  $radius4 * 1px;
      -o-border-radius: $radius * 1px  $radius2 * 1px  $radius3 * 1px  $radius4 * 1px;
      -webkit-border-radius: $radius * 1px  $radius2 * 1px  $radius3 * 1px  $radius4 * 1px;
      border-radius: $radius * 1px  $radius2 * 1px  $radius3 * 1px  $radius4 * 1px;
    }
  }
  
  @mixin box-shadow($horizontal, $vertical, $blur, $spread, $color) {
    -moz-box-shadow: $horizontal $vertical $blur $spread $color;
    -webkit-box-shadow: $horizontal $vertical $blur $spread $color;
    box-shadow: $horizontal $vertical $blur $spread $color;
  }
  
  @mixin box-sizing($value) {
    -moz-box-sizing: $value;
    -ms-box-sizing: $value;
    -webkit-box-sizing: $value;
    box-sizing: $value;
  }
  
  @mixin linear-gradient($fromColor, $toColor, $fallbackColor) {
    background-color: $fallbackColor; /* Fallback Color */
    background-image: -moz-linear-gradient(top, $fromColor, $toColor); /* FF3.6 */
    background-image: -ms-linear-gradient(top, $fromColor, $toColor); /* IE10 */
    background-image: -o-linear-gradient(top, $fromColor, $toColor); /* Opera 11.10+ */
    background-image: -webkit-gradient(linear, left top, left bottom, from($fromColor), to($toColor)); /* Saf4+, Chrome */
    background-image: -webkit-linear-gradient(top, $fromColor, $toColor); /* Chrome 10+, Saf5.1+, iOS 5+ */
    background-image: linear-gradient(top, $fromColor, $toColor);
    filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='#{$fromColor}', EndColorStr='#{$toColor}');
  }  
  
  @mixin opacity($value) {
    filter: alpha(opactiy=($value * 100));
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$value * 100})";
    -khtml-opacity: $value;
    -moz-opacity: $value;
    opacity: $value;
  }
  
  @mixin transition($attribute, $time, $timing) {
    -moz-transition: $attribute $time $timing;
    -ms-transition: $attribute $time $timing;
    -o-transition: $attribute $time $timing;
    -webkit-transition: $attribute $time $timing;
    transition: $attribute $time $timing;
  }
  
  @mixin transitionTransform($duration, $timing: linear, $delay: 0) {
    -webkit-transition: -webkit-transform $duration $timing;
    -moz-transition: -moz-transform $duration $timing;
    -o-transition: -o-transform $duration $timing;
    transition: transform $duration $timing;
  }
  
  @mixin translate3d($x: 0, $y: 0, $z: 0) {
    -webkit-transform: translate3d($x, $y, $z);
    -moz-transform: translate3d($x, $y, $z);
    -ms-transform: translate3d($x, $y, $z);
    -o-transform: translate3d($x, $y, $z);
    transform: translate3d($x, $y, $z);
  }
  
  @mixin user-select($value) {
    -khtml-user-select: $value;
    -moz-user-select: $value;
    -ms-user-select: $value;
    -webkit-user-select: $value;
    user-select: $value;
  }

/*
  Animations
*/
  /*
    Core animate
  */
    @mixin animation($keyframeName, $duration, $delay) {
      -moz-animation: $keyframeName $duration $delay linear forwards;
      -o-animation: $keyframeName $duration $delay linear forwards;
      -webkit-animation: $keyframeName $duration $delay linear forwards;
      animation: $keyframeName $duration $delay linear forwards;
    }
  /*
    Fade in / out
  */
    @mixin fadeOpacity($keyframeName, $startOpacity, $endOpacity) {
      @-moz-keyframes $keyframeName { 0% { opacity: $startOpacity; } 100% { opacity: $endOpacity; } }
      @-o-keyframes $keyframeName { 0% { opacity: $startOpacity; } 100% { opacity: $endOpacity; } }
      @-webkit-keyframes $keyframeName { 0% { opacity: $startOpacity; } 100% { opacity: $endOpacity; } }
      @keyframes $keyframeName { 0% { opacity: $startOpacity; } 100% { opacity: $endOpacity; } }
    }